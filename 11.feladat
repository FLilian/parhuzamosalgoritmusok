//Ebben a példában két szálat indítunk, és mindkét szál ugyanazt az elemet módosítja a tömbben (az index 5-öt).
Azonban nem alkalmazunk szinkronizációt a szálak között, így nincs garantált sorrend a módosítások között. 
Ennek eredményeként a kimenet nem determinisztikus lehet, és különböző eredményeket kaphatunk minden futtatáskor.
//Készítsen olyan példát, amely megmutatja, hogy több szál használata esetén nem garantált a helyes működés!
#include <iostream>
#include <thread>

const int ARRAY_SIZE = 10;
int myArray[ARRAY_SIZE];

void threadFunction(int threadId) {
    // Az egyik szál módosítja az adott indexű elemet
    myArray[threadId] = threadId;
}

int main() {
    // Tömb inicializálása
    for (int i = 0; i < ARRAY_SIZE; i++) {
        myArray[i] = 0;
    }

    // Két szál indítása
    std::thread t1(threadFunction, 5);
    std::thread t2(threadFunction, 5);

    // Szálak befejezésének megvárása
    t1.join();
    t2.join();

    // Tömb kiíratása
    for (int i = 0; i < ARRAY_SIZE; i++) {
        std::cout << myArray[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
